package com.neusoft.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.neusoft.dao.IAa26Dao;
import com.neusoft.dao.IKc02Dao;
import com.neusoft.service.IElsewhereHospitalizeService;
import com.neusoft.util.ConvertDataToRMUtil;
import com.neusoft.util.ResultModel;

@Service
public class ElsewhereHospitalizeServiceImpl implements IElsewhereHospitalizeService{

	private static final String TITLE = "异地就医";
	private static final String MSGNO = "1002";
	
	@Resource
	public IAa26Dao aa26Dao;
	@Resource
	public IKc02Dao kc02Dao;
	
	public ResultModel getElsewherePerson() {
		return getElsewherePerson(null, null,null);
	}
	@Override
	public ResultModel getElsewherePerson(String beginTime, String endTime,String localName) {
		String sql = ConvertDataToRMUtil.getCommonSql(beginTime, endTime,localName);
		String out_sql = "select count(*) count,substr(yab003,0,2) subject from JK_KC02 " + sql
		                 + " and substr(yab300,0,2) = '22' and ydbz = '1' group by substr(yab003,0,2) ";
		String in_sql = "select count(*) count,substr(yab300,0,2) subject from JK_KC02 " + sql +
		          " and substr(yab003,0,2) = '22' and ydbz = '1' group by substr(yab300,0,2) ";
		//获取吉林到其他省就医的人员数量
		List<Object> list_out = kc02Dao.getSqlData(out_sql);
		//获取其他省到吉林就医的人员数量
		List<Object> list_in = kc02Dao.getSqlData(in_sql);
		//在此对返回的数据进行封装
		ResultModel rm = ConvertDataToRMUtil.convertDataToRM(list_out, list_in);
		rm = convertRM(rm);
		rm.setTitle(TITLE);
		return rm;
	}
	/**
	 * convertRM 将数据进行自定义转换
	 * @param rm
	 * @return
	 */
	private ResultModel convertRM(ResultModel rm) {
		Map<String, ArrayList> yAxis = rm.getyAxis();
		ArrayList out_list = yAxis.get("转出");
		for (int i = 0; i < out_list.size(); i++) {
			String code = (String)out_list.get(i);
			String province_name = convertCodeToProvinceName(code);
			rm.getyAxis().get("转出").set(i, province_name);
		}
		ArrayList in_list = yAxis.get("转入");
		for (int i = 0; i < in_list.size(); i++) {
			String code = (String)in_list.get(i);
			String province_name = convertCodeToProvinceName(code);
			rm.getyAxis().get("转入").set(i, province_name);
		}
		Map<String, ArrayList> series = rm.getSeries();
		ArrayList out_data = series.get("转出");
		ArrayList in_data = series.get("转入");
		
		ArrayList temp_data = new ArrayList();
		if (out_list.size() > in_list.size()) {
			for (int i = 0; i < out_list.size(); i++) {
				temp_data.add(0);
			}
			for (int i = 0; i < in_list.size(); i++) {
				if (out_list.contains(in_list.get(i))) {
					//我们找到out_list中该元素的位置
					int position = out_list.indexOf(in_list.get(i));
					temp_data.set(position, in_data.get(i));
				} else {
					//这说明不包含这个值，那么在原来的数组上新增节点
					out_list.add(in_list.get(i));
					out_data.add(0);
					temp_data.add(in_data.get(i));
				}
			}
			//将数据封装到RM中
			rm.getyAxis().put("provinces", out_list);
			rm.getSeries().put("转入", temp_data);
			rm.getSeries().put("转出", out_data);
		} else {
			for (int i = 0; i < in_list.size(); i++) {
				temp_data.add(0);
			}
			for (int i = 0; i < out_list.size(); i++) {
				if (in_list.contains(out_list.get(i))) {
					//我们找到out_list中该元素的位置
					int position = in_list.indexOf(out_list.get(i));
					temp_data.set(position, out_data.get(i));
				} else {
					//这说明不包含这个值，那么在原来的数组上新增节点
					in_list.add(out_list.get(i));
					in_data.add(0);
					temp_data.add(out_data.get(i));
				}
			}
			//将数据封装到RM中
			rm.getyAxis().put("provinces", out_list);
			rm.getSeries().put("转入", in_data);
			rm.getSeries().put("转出", temp_data);
		}
		return rm;
	}
	/**
	 * convertCodeToProvinceName
	 * @param code
	 * @return String province name
	 */
	private String convertCodeToProvinceName(String code) {
		String province_code = code ;
		return aa26Dao.getProvinceNameByCode(province_code);
	}

}
