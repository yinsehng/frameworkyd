/**
 * 
 */
package com.neusoft.si.simis.local.medicare.wtc.applogic;

import java.util.HashMap;
import java.util.Iterator;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.sql.Types;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.stream.XMLResolver;


import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.rmi.PortableRemoteObject;
import examples.wtc.atmi.simpFML32.Rstring;
import examples.wtc.atmi.simpFML32.RstringHome;
import examples.wtc.atmi.simpFML32.YDJYfml32;

import com.neusoft.drm.ProcPara;

import com.neusoft.si.simis.core.medicare.domain.infomanagement.applogic.InstrumentInfoApplogic;
import com.neusoft.si.sys.bl.domain.applogic.impl.SIApplogicBase;
import com.neusoft.unieap.misc.DateTool;
import com.neusoft.unieap.misc.StrTool;
import com.neusoft.unieap.service.exception.AppException;
import com.neusoft.unieap.util.datastore.ValueDataSet;

import com.neusoft.si.sys.services.database.SqlUtil;
//import com.sun.rowset.internal.XmlResolver;
//import com.neusoft.si.simis.lo cal.medicare.wtc.applogic;

public class CallWtc  extends SIApplogicBase implements ICallWtc{
	/**
	 * 
	 * 
	 * 中心为1，院端为2
	 * 
	 * 20130910
	 * 去掉'<','>'为:""
	 * 
	 */
	//private String strSendBussiCode;
	//private String appCode;
	//private String errMsg,strAkc378;
	//private String outPutData;
	public String str_jsfjylsh;
	//private String strAka801;//strAka803,strAka802,
	//private List callMsg = new ArrayList();
/*	public void setCallMsg(List listCall){
		共16位
        //_VER           版本号
		//_SRC           定点编号
		//_DES           参保人员所属统筹区号
		//_OPERID       操作员编号
		//_BATNO        业务周期号
		//_MSGNO        交易代码 
		//_MSGREF        "由交易发起者产生，回应报文自动带回"
		//_WORKDATE      工作日期
		//szMSGID        发送方交易流水号
		//_SZMSGREF       返参时，返回参保地业务周期号
		//_STATUS        报文状态 
		//_AKC020                    卡号（参保地）
		//_AAC001                   个人编号(参保地)
		//AAC999		"统筹区号"
		//_RESERVE       预留
		//_szMSGBODY     报文体(实际入参/出参)
 
		
		callMsg = listCall;
	}*/
    private List getAreaMsg(String strAab324){
    	List listReturn = new ArrayList();
    	StringBuffer sql = new StringBuffer();
    	sql.append("select akc803,aae013 from ka80 where aab324 =? ");
    	Object[] params={strAab324};
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString(), params);
			if(dsTemp.getRowCount() > 0){
			   dsTemp.moveTo(1);
			   listReturn.add(dsTemp.getString("akc803"));
			   listReturn.add(dsTemp.getString("aae013"));
			}
		} catch (AppException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	return listReturn;
    }
    private String getReportID(String strAab324){
    	String strReturn,strSql;
    	StringBuffer sql = new StringBuffer();
    	strSql = "select fun_create_报文ID('".concat(strAab324).concat("') strid from dual");
    	sql.append(strSql);
    	strReturn = "";
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString());
			if(dsTemp.getRowCount() > 0){
			   dsTemp.moveTo(1);
			   strReturn = dsTemp.getString("strId");
			 /*  strReturn = strReturn;*/
			}
		} catch (AppException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}    	
    	return strReturn;
    }
    //根据收费端或动态库交易编码获取异地交易编码
    public String getWtcBussCode(String strAab324,String strSiCode){
    	String strReturn;
    	StringBuffer sql = new StringBuffer();
    	strReturn = "";
    	sql.append("select aka801 from ka81 where aab324 =? and aka802 = ? and aka803='1' ");
    	Object[] params={strAab324,strSiCode};
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString(), params);
			if(dsTemp.getRowCount() > 0){
			   dsTemp.moveTo(1);
			   strReturn = dsTemp.getString("aka801");
			   
			  
			}
			else
			{   
				//如果查询到的交易代码为NVL,则说明是发往结算中心的或是中心交易，无需和医保接口代码进行转换
				strReturn=strSiCode;
			}
		   
		} catch (AppException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}    	
    	return strReturn;
    }    
    private List getKa80Msg(String strInput,String centerbz){
    	List listReturn = new ArrayList();
    	StringBuffer sql = new StringBuffer();
    	sql.append("select aka801,aka802,aka803,aka804,aka805 from ka80 where aab324 =? and aka806=? ");
    	Object[] params={strInput,centerbz};
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString(), params);
			if(dsTemp.getRowCount() > 0){
			   dsTemp.moveTo(1);
			   listReturn.add(dsTemp.getString("aka801"));
			   listReturn.add(dsTemp.getString("aka802"));
			   listReturn.add(dsTemp.getString("aka803"));
			   listReturn.add(dsTemp.getString("aka804"));
			   listReturn.add(dsTemp.getString("aka805"));
			}
		} catch (AppException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	return listReturn;
    }   
    /*public void setOutPutData(String strInstr, List listIn){
    	outPutData = strInstr;
    	callMsg = listIn;
    }*/
    //出参处理
	private String executeProcedure(String strSendBussiCode,String outPutData,String strAreaCode) throws AppException{
		
		/*int index= 0;*/
		int appCode ,errCode;
		String str_fx;
		str_fx="2";
		String ls_returnmsg,ls_returncode,ls_errmsg="";
		appCode = 2;
		errCode = 3;
		//String str_inputdata = (String)callMsg.get(5);             //业务编号 		
		String str_inputdata =  strSendBussiCode;
		
		
		int i = 0;			
        ProcPara[] paras=new ProcPara[]{
                new ProcPara(++i, ProcPara.IN, outPutData, Types.VARCHAR), //实际的出参,
                new ProcPara(++i, ProcPara.IN, str_inputdata, Types.VARCHAR),//业务编号
                new ProcPara(++i, ProcPara.IN, strAreaCode, Types.VARCHAR),//统筹区号(代表本身229900)
                new ProcPara(++i, ProcPara.IN,  str_fx, Types.VARCHAR),//转换的方向
                new ProcPara(++i, ProcPara.OUT, Types.VARCHAR),
                new ProcPara(++i, ProcPara.OUT, Types.VARCHAR),
                new ProcPara(++i, ProcPara.OUT, Types.VARCHAR)
                }; 
        try{
            // 调用获取参数存储过程
        	
            execStoreProcedure("PKG_YD_XML.PRC_XML_TO_STRING", paras, appCode, errCode, true);
            
            
            
            
            ls_returnmsg="";
            ls_returnmsg  = paras[4].getValue().toString();//实际返回值
            ls_returncode = paras[5].getValue().toString(); 
            
            if(paras[6].getValue()==null){
        		ls_errmsg = "";
        	}else{
        		ls_errmsg	  = paras[6].getValue().toString();    
        	}        
            //ls_errmsg="";
        } catch (Exception e){
        	
        	String errStr;
            AppException appEx = new AppException(e);
            appEx.setErrCode(-100111);
            if(ls_errmsg.length() > 0){
            	appEx.setContextMsg("执行 PKG_YD_XML用于PRC_XML_TO_STRING 出错！"+errCode);     
            }else{
            	errStr = appEx.getErrMsg();
                appEx.setContextMsg("执行  PKG_YD_XML用于PRC_XML_TO_STRING 出错！"+errStr);           	
            }
           
            throw appEx;
        }   
        
        
        if(ls_returncode.equals("1")){
        	
        	
        }else{
        	//System.out.println("ls_errmsg="+ls_errmsg);
        	
            AppException appEx = new AppException(new Exception());
            appEx.setErrCode(-100111);
            appEx.setContextMsg(ls_errmsg);                
            throw appEx;
        }
        
		return ls_returnmsg;
	}	   
	/**说明
	 * 本方法用于将txuedo服务返回的异地出参格式转换为省直医保所需要的出参格式
	 * */
    public String convertToSi(String strSendBussiCode,String outPutData,String strAreaCode) throws AppException{
    	//将转换成本地SI后的串,写到outPutData中
    	String outputStr="";
    	
    	XmlResolve xmlResolve;
    	
    	/*Map mapElve,macExc=new HashMap();*/
    	Map mapElve=new HashMap();
    	List listReturn = new ArrayList();
    	int intSeat = 1;
    	mapElve = new HashMap();
    	//xml格式出参,压入list中
    	listReturn.add(0, "占位");
    	try {
    		String strOutTemp = "";
			xmlResolve =  new XmlResolve();
			xmlResolve.GetInstance(outPutData);
			mapElve = xmlResolve.getNodeChildValue("OUTPUT");
			for (int i = 0; i < mapElve.size(); i++) {
				strOutTemp = (String) mapElve.get(String.valueOf(i));
				listReturn.add(intSeat, strOutTemp);
				intSeat++;
			}			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			throw (AppException)e;
		}   
		//转换成本地SI出参
		outputStr = executeProcedure(strSendBussiCode,outPutData,strAreaCode);
		
		//System.out.println("测试返回到这里没？executeProcedure");
		/*intCount =Integer.parseInt(outputStr.substring(0,outputStr.indexOf("|")));
		if(intCount > 0){
			outputStr = outputStr.substring(outputStr.indexOf("|")+1);
		}		
		for (int i = 1; i <= intCount; i++) {			
			strTemp = outputStr.substring(0,outputStr.indexOf("|"));
			strTemp01 = strTemp.substring(0,strTemp.indexOf(","));
			strTemp = strTemp.substring(strTemp.indexOf(",")+1);
			macExc.put(strTemp01, strTemp);
			outputStr = outputStr.substring(outputStr.indexOf("|") + 1);
		}
    	StringBuffer sql = new StringBuffer();
    	String strAka823="",strAka825="",strAka824="",strConvert="",strValue;    	
    	String bussNo = (String)callMsg.get(1);
    	String strYwzq = (String)callMsg.get(4);
    	String strAab324 = (String)callMsg.get(9);    	
    	sql.append("select nvl(aka823,'0') aka823,nvl(aka825,'NO') aka825,nvl(aka824,'0') aka824 from ka83 where  aka803 = '2' and" +
    			                                               " aab324 = ?   and" + 
    			                                               " aka802 = ? " +
    			                                               "order by to_number(aka824)");
    	Object[] params={strAab324,bussNo};
    	int i = 1;
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString(), params);
			intSeat = 1;
			for (i = 1; i <= dsTemp.getRowCount(); i++) {
				 dsTemp.moveTo(i);
				 strAka823 = dsTemp.getString("aka823");
				 strAka825 = dsTemp.getString("aka825");
				 strAka824 = dsTemp.getString("aka824");
				 intSeat = Integer.parseInt(strAka823);
				 strValue = "";
				 if(intSeat > 0 ){
					 strValue = (String)listReturn.get(intSeat); 
				 }else{
					 if(strAka825.equals("YES")){
						 strValue = (String)macExc.get(strAka824);
					 }
				 }
				 strConvert=strConvert.concat(strValue).concat("|");*/				 
		/*	}
		} catch (AppException e) {
			// TODO Auto-generated catch block			
			e.printStackTrace();
			System.out.println("callWtc 转换为本地参数时出错.出错位： "+ Integer.valueOf(i));
			e.setErrMsg("callWtc 转换为本地参数时出错.出错位： "+ Integer.valueOf(i));
		}    */
		
		//生成出参
    	outPutData = outputStr;
    	return outPutData;
    }
    
    /*说明
      本方法用于将医保格式的入参转换为异地格式的入参，用于tuxedo调用。
       强制转换为xml
   */
    private String convertToFml(List strList) throws AppException{ 
    	//转成FML中的input参数
    	String strReturn = "",strAka820="",strAka824="",strAka825="",strAka804="";
    	String strAka805="",strAka821="";   //二级代码标识，代码名称
    	String str_input;
    	String strFml="",strInputData="",strValue="";
    	String bussNo = (String)strList.get(5);
    	String strAab324 = (String)strList.get(0);
    	String aka065="";
		String aka068="";
		String akc229="";
    	List listFml = new ArrayList();
    	
    	//String errorMSG="";//入参有空格的错误信息
    	str_input =(String)strList.get(15);
    	if(str_input.equals("")||str_input==null)
    	{
    		strReturn ="";
    		return strReturn;
    	}
    	
    	//Map mapCall = (Map)strList.get(15);
    	
    	
    	//解析入参
    	int intInputCount=0,intSeat=0;
    	
    	strInputData = (String)strList.get(15);
    	//System.out.println("看看入参是什么？strInputData="+strInputData);
    	
    	listFml.add(0, "占位");
    	while(true){
    		intSeat = strInputData.indexOf("|");
    		if(intSeat >=0 ){
    			intInputCount += 1;
    			listFml.add(intInputCount, strInputData.substring(0,intSeat));
    			
    			strInputData = strInputData.substring(intSeat + 1);
    		}else{
    			//如果查不到"|"，则将整个strInputData做为一个参数进行传入
    			intInputCount += 1;
    			listFml.add(intInputCount, strInputData);
    			
    			break;
    		}    		
    	}
    	//System.out.println("分解串："+listFml.get(24));
    	StringBuffer sql = new StringBuffer();
    	sql.append("select aka820,aka823,aka824,aka825,nvl(aka804,'NULL') aka804,nvl(aka805,'NULL') aka805,aka821 from ka82 where  aka803 = '1' and" +
    			                                               " aab324 = ?   and" + 
    			                                               " aka802 = ? " +
    			                                               "order by to_number(aka823)");
    	Object[] params={strAab324,bussNo};
    	if("2310".equals(bussNo)){
	      	String kc22akb020 = (String)strList.get(1);//220000+11001
	    	String kc22akc190 = (String)listFml.get(1);
	    		
	    		String sqlkc21 = "select * from kc21 where akc190 = '"+kc22akc190+"' and akb020 = '"+kc22akb020.substring(6)+"'";
	    		ValueDataSet datekc21 = SqlUtil.getInstance().executeQuery(sqlkc21);
	    		if(datekc21.getRowCount()>0){
	    				
	    				datekc21.moveTo(1);
	    				
	    				//新疆
	    				if("650000".equals(datekc21.getString("AAB301"))){
	    				  	String[] a = queryka52(listFml,datekc21);
	    				  	aka065 =a[0];
	    				  	aka068 =a[1];
	    				  	akc229 =a[2];
	    				}
	    		}else{
	      			throw new AppException("在查询乙类自付比例时，没有查询到对应的就诊登记信息!");
	      		}
    	}
    	int i = 1;
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString(), params);
			for (i = 1; i <= dsTemp.getRowCount(); i++) {
			   dsTemp.moveTo(i);
			   //strAka823 = dsTemp.getString("aka823");
			   strAka820 = dsTemp.getString("aka820");
			   strAka824 = dsTemp.getString("aka824");
			   strAka825 = dsTemp.getString("aka825");	
			   strAka804 = dsTemp.getString("aka804");
			   strAka805 = dsTemp.getString("aka805");
			   strAka821 = dsTemp.getString("aka821");
			   
			   intSeat = Integer.parseInt(strAka824);
			   strFml=strFml.concat("<");
			   strFml=strFml.concat(strAka820);
			   strFml=strFml.concat(">");
			   //值
			   strValue = "";
			   if(strAka825.equals("YES")){
				   //strValue = (String)mapCall.get(strAka823);
			   }else{
					   if(intSeat > 0 && intInputCount >= intSeat){
						 strValue = (String)listFml.get(intSeat); 
						
					   }else{
						   if(strAka804.equals("NULL"))
						   {
							   strValue="";
							   strAka804="";
						   }
						   else
						   {
						       strValue = strAka804;
						   }
					   }
			   }
			   //如果是日期型，则需要转成异地接口规定入参 yyyy-mm-dd hh24:mi:si
			   if(strAka804.equals("DATE")&&!strValue.equals("")){
				   String strDateSql="select to_char(to_date('"+strValue+"','yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') strDate from dual";
				   Object[] DateParams={};
				   ValueDataSet dateVTemp = SqlUtil.getInstance().executeQuery(strDateSql, DateParams);
				   if(dateVTemp.getRowCount()>0){
					   dateVTemp.moveTo(1);
					   strValue =  dateVTemp.getString("strDate");	
				   }
			   }else{
				   //如果不是日期，即不是数字1，则取出默认值 
				   if(strValue.equals("")&&!strAka804.equals("DATE")){
					   if(strAka804.equals("NULL"))
					   {
						   //strValue="";
						   strAka804="";
					   }
					   strValue = strAka804;
				   }
			   }
			   //为了处理过方时的金额，没办法，特殊处理吧
			   if(strAka820.equals("AKC227")&&bussNo.equals("2310"))
			   {
				   BigDecimal ba = new BigDecimal((String)(String)listFml.get(9));
			       BigDecimal bb = new BigDecimal((String)(String)listFml.get(10));
			       strValue=ba.multiply(bb).toString();
				   //strValue=Double.toString(Double.valueOf((String)(String)listFml.get(9))*Double.valueOf((String)(String)listFml.get(10)));
					     
			   }
			   /**
			    * 20151030 add by li.zhiqiang
			    * 增加三个字段  因为省直没有传入，所以得现查询结果   
			    * AKA065 项目收费等级 AKA068 中心限价  AKC229 乙类自付比例
			    */
			   
			   if(strAka820.equals("AKA065")&&bussNo.equals("2310"))
			   {
			       strValue=aka065;
			   }
			   if(strAka820.equals("AKA068")&&bussNo.equals("2310"))
			   {
			       if("null".equals(aka068)||"NULL".equals(aka068)||aka068==null){
			    	   strValue="";
			       }else{
			    	   strValue=aka068;
			       }
				   
			   }
			   if(strAka820.equals("AKC229")&&bussNo.equals("2310"))
			   {
			       strValue=akc229;
			   }
			   
			   if(strAka805.equals("NULL"))
			   {
				   //strValue="";
				   strAka805="0";
			   }
			   /*if(strValue.equals("NULL")||strValue.equals("null"))
			   {
				   strValue="21";
			   }*/

			  /* if(strAka820.equals("AKA063")&&strValue.equals("33")&&bussNo.equals("2310")){
				   strValue="31";
			   }*/
			   
			  
			   
			   //增加对中心报销标识的增加
			   if(bussNo.equals("2210")&&strAka820.equals("AAE005")){
				   /*for(int j=0;j<=intInputCount;j++){
					   
					   System.out.println("第"+j+"位，我想看的值是="+listFml.get(j));
				   } */
				  // System.out.println("瞧瞧intSeat="+intSeat);
				  // System.out.println("瞧瞧intInputCount="+intInputCount);
				   String akb020=(String)listFml.get(intInputCount);
				   //System.out.println("看看intInputCount是多少？"+intInputCount);
				   //System.out.println("看看我的最后一位是什么？"+(String)listFml.get(intInputCount));
				   if(akb020.equals("00001")||akb020.equals("00002")||akb020.equals("00003")){ 
					   //System.out.println("测试到这里了吗？");
					   strValue="1";
				   } 
				   
				   
			   }
			   
			   //增加对空格的校验，存在空格则报错
			   /**
			    * @author xudn
			    * 2014-05
			    */
			   
			   /*Pattern pattern = Pattern.compile("\\s");
			   System.out.println("strValue="+strValue);
			   Matcher matcher = pattern.matcher(strValue);
			   boolean found = matcher.find();
			   if(found){
				   //System.out.println("入参中有空格");
				   errorMSG="传入参数中有空格,请进行检查后，重试!";
				   throw new AppException(errorMSG);
			   }*/

			   if(strAka805.equals("NULL"))
			   {
				   //strValue="";
				   strAka805="0";
			   }
			   
			  // System.out.println("测试二级代码0："+strAka805);
			 //判断strAka820为二级代码
			   if(strAka805.equals("1")){
				   strValue=ConvertinCode(strAka820,strValue,strAka821);
			   }
			   
			   //str_akc020after=str_akc020after.replaceAll(ydcardInfodata[7],ydcardInfodata[7].replaceAll("-", ""));
			   strValue=strValue.replace(strValue, strValue.replaceAll("<", "\""));
			   strValue=strValue.replace(strValue, strValue.replaceAll(">", "\""));
			   
			   strFml=strFml.concat(strValue);			   
			   strFml=strFml.concat("</");
			   strFml=strFml.concat(strAka820);
			   strFml=strFml.concat(">");
			}
			if(dsTemp.getRowCount()<1){
				strFml = "<input></input>";
			}else{
				strFml = "<input>".concat(strFml).concat("</input>");
			}
		} catch (AppException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			//System.out.println("测试到这里，抛异常！");
			
			e.setErrMsg("将医保格式的入参转换为异地格式的入参，出错位： "+ Integer.valueOf(i)+e);	
			//System.out.println("异常"+e.toString());
			throw e;
		}    	
		strReturn = strFml;
    	return strReturn;
    }
    
    /**
     * 
     * 入参时
     * 医保的二级代码转换为异地需要的二级代码
     * @param strAka820
     * @param strValue 
     * @return
     * @throws AppException 
     */
    public String ConvertinCode(String strAka820,String strValue,String strAKA821) throws AppException{
    	//System.out.println("看看各入参值什么样滴!!!!strAka820="+strAka820+"。strValue="+strValue+"。strAKA821="+strAKA821+"。");
    	//strValue="111";
    	String newCode="";
    	StringBuffer sql = new StringBuffer();
    	sql.append("SELECT c_out_value  FROM code_change   WHERE c_type = '0' AND c_in_value = ?  AND c_code = ?  ");
    	Object[] params={strValue,strAka820};
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString(),params);
			//System.out.println("测试二级代码转换1："+dsTemp.getRowCount());
			
			if(dsTemp.getRowCount() > 0){
			   dsTemp.moveTo(1);
			 /*  if(dsTemp.getString("c_out_value").equals("NULL"))
			   {
				  //需要测试一下,是否能准确报错。
				  throw new AppException("代码类别为："+strAka820+"。代码类名称为："+strAKA821+"。代码值为："+strValue+"。在省平台中不存在该二级代码转换出错!请检查后重试!");
			   }
			   else
			   {*/
				   newCode = dsTemp.getString("c_out_value");//对照二级代码
				   //System.out.println("测试二级代码转换3：newCode="+newCode);
			   //}
			}else{
				newCode=strValue;
				//System.out.println("这是原来的值：newCode="+newCode);
				/*System.out.println("测试二级代码转换2：");
				 throw new AppException("代码类别为："+strAka820+"。代码类名称为："+strAKA821+"。代码值为："+strValue+"。未进行该二级代码对照!请检查后重试!");
			*/} 
		} catch (AppException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			throw e;
		}
		
		//System.out.println("看看返回值"+newCode);
    	return newCode;
    }
    
    /*说明
    本方法用于将医保格式的入参转换为异地格式的入参，用于tuxedo调用。
     强制转换为xml  用于多条的单条处理入参
 */
  private String kc22convertToFml(List strList,String strInputData) throws AppException{ 
  	//转成FML中的input参数
  	String strReturn = "",strAka820="",strAka824="",strAka825="",strAka804="";
  	String strAka805="",strAka821="";   //二级代码标识，代码名称
  	String strFml="",strValue="";
  	String bussNo = (String)strList.get(5);
  	String strAab324 = (String)strList.get(0);
  	List listFml = new ArrayList();
  	String aka065="";
  	String aka068="";
  	String akc229="";
  	
  	if(strInputData.equals("")||strInputData==null)
  	{
  		strReturn ="";
  		return strReturn;
  	}
  
  	//解析入参
  	int intInputCount=0,intSeat=0;
  	//System.out.println("看看入参是什么？strInputData="+strInputData);
  	
  	
  	listFml.add(0, "占位");
  	while(true){
  		intSeat = strInputData.indexOf("|");
  		if(intSeat >=0 ){
  			intInputCount += 1;
  			listFml.add(intInputCount, strInputData.substring(0,intSeat));
  			
  			strInputData = strInputData.substring(intSeat + 1);
  		}else{
  			//如果查不到"|"，则将整个strInputData做为一个参数进行传入
  			intInputCount += 1;
  			listFml.add(intInputCount, strInputData);
  			
  			break;
  		}    		
  	}
  	
  	//System.out.println("我要看看第9位的实际值=" + (String) listFml.get(9));
	if (Double.valueOf((String) listFml.get(9)) == 0) {
		throw new AppException("处方明细上传失败!处方费用不能为0，请检查上传的处方明细中，是否有金额为0的明细。");

	}
	
  	StringBuffer sql = new StringBuffer();
  	sql.append("select aka820,aka824,aka825,nvl(aka804,'NULL') aka804,nvl(aka805,'NULL') aka805,aka821 from ka82 where  aka803 = '1' and" +
  			                                               " aab324 = ?   and" + 
  			                                               " aka802 = ? " +
  			                                               "order by to_number(aka823)");
  	Object[] params={strAab324,bussNo};
  	if("2310".equals(bussNo)){
	  	String akb020 = (String)strList.get(1);//220000+11001
		String akc190 = (String)listFml.get(1);
			
			String sqlkc21 = "select * from kc21 where akc190 = '"+akc190+"' and akb020 = '"+akb020.substring(6)+"'";
			ValueDataSet datekc21 = SqlUtil.getInstance().executeQuery(sqlkc21);
			if(datekc21.getRowCount()>0){
					
					datekc21.moveTo(1);
					
					//新疆
					if("650000".equals(datekc21.getString("AAB301"))){
					  	String[] a = queryka52(listFml,datekc21);
					  	aka065 =a[0];
    				  	aka068 =a[1];
    				  	akc229 =a[2];
					}
			}else{
	  			throw new AppException("在查询乙类自付比例时，没有查询到对应的就诊登记信息!");
	  		}
  	}
  	int i = 1;
  	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString(), params);
			for (i = 1; i <= dsTemp.getRowCount(); i++) {
			   dsTemp.moveTo(i);
			   strAka820 = dsTemp.getString("aka820");
			   strAka824 = dsTemp.getString("aka824");
			   strAka825 = dsTemp.getString("aka825");	
			   strAka804 = dsTemp.getString("aka804");
			   strAka805 = dsTemp.getString("aka805");
			   strAka821 = dsTemp.getString("aka821");
			   
			   intSeat = Integer.parseInt(strAka824);
			   //值
			   strValue = "";
			   if(strAka825.equals("YES")){
				   //strValue = (String)mapCall.get(strAka823);
			   }else{
					   if(intSeat > 0 && intInputCount >= intSeat){
						 strValue = (String)listFml.get(intSeat); 
						
					   }else{
						   if(strAka804.equals("NULL"))
						   {
							   strValue="";
							   strAka804="";
						   }
						   else
						   {
						       strValue = strAka804;
						   }
					   }
			   }
			   //如果是日期型，则需要转成异地接口规定入参 yyyy-mm-dd hh24:mi:si
			   if(strAka804.equals("DATE")&&!strValue.equals("")){
				   String strDateSql="select to_char(to_date('"+strValue+"','yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') strDate from dual";
				   Object[] DateParams={};
				   ValueDataSet dateVTemp = SqlUtil.getInstance().executeQuery(strDateSql, DateParams);
				   if(dateVTemp.getRowCount()>0){
					   dateVTemp.moveTo(1);
					   strValue =  dateVTemp.getString("strDate");	
				   }
			   }else{
				   //如果不是日期，即不是数字1，则取出默认值 
				   if(strValue.equals("")&&!strAka804.equals("DATE")){
					   if(strAka804.equals("NULL"))
					   {
						   //strValue="";
						   strAka804="";
					   }
					   strValue = strAka804;
				   }
			   }
			   //为了处理过方时的金额，没办法，特殊处理吧
			   if(strAka820.equals("AKC227")&&bussNo.equals("2310"))
			   {
				   BigDecimal ba = new BigDecimal((String)(String)listFml.get(9));
			       BigDecimal bb = new BigDecimal((String)(String)listFml.get(10));
			       strValue=ba.multiply(bb).toString();
			      
			   }
			   /**
			    * 20151030 add by li.zhiqiang
			    * 增加三个字段  因为省直没有传入，所以得现查询结果   
			    * AKA065 项目收费等级 AKA068 中心限价  AKC229 乙类自付比例
			    */
			   
			   if(strAka820.equals("AKA065")&&bussNo.equals("2310"))
			   {
			       strValue=aka065;
			   }
			   if(strAka820.equals("AKA068")&&bussNo.equals("2310"))
			   {
			       if("null".equals(aka068)||"NULL".equals(aka068)||aka068==null){
			    	   strValue="";
			       }else{
			    	   strValue=aka068;
			       }
				   
			   }
			   if(strAka820.equals("AKC229")&&bussNo.equals("2310"))
			   {
			       strValue=akc229;
			   }
			   
			   if(strAka805.equals("NULL"))
			   {
				   //strValue="";
				   strAka805="0";
			   }

			   //判断strAka820为二级代码
			   if(strAka805.equals("1")){
				   strValue=ConvertinCode(strAka820,strValue,strAka821);
			   }			   

			   strValue=strValue.replace(strValue, strValue.replaceAll("<", "\""));
			   strValue=strValue.replace(strValue, strValue.replaceAll(">", "\""));
			   strFml=strFml.concat(strValue);			   
			   strFml=strFml.concat("|");
			   System.out.println("------------------------------我的strFml------------"+strFml);
			}
			
		} catch (AppException e) {
			// TODO Auto-generated catch block
			
			e.setErrMsg("将医保格式的入参转换为异地格式的入参，出错位： "+ Integer.valueOf(i)+e);	
			
			throw e;
		}
		strReturn = strFml;
		//System.out.println("看看每一条的返回值：strReturn="+strReturn);
  	return strReturn;
  }
 
	/*说明
     * 主方法
     * java端调用的入口
     * listData的构成将是关键
     *老枪春夜约一炮，树林野战丰乳女------莫言获奖感言
     * */
    
    public List WtcSend(List listData) throws AppException{
    	String strCardInfo;
    	String strFml="";
    	String outPutData="";
    	String str_wtcsentout;
    	
    	
/*    	List callMsg = new ArrayList();
    	callMsg = listData;*/
    	//List  srt_output;
    	
    	String strinput="";
    	//int intSeat=0;
    	List listFmlkc22input = new ArrayList();
    	int intInputCountkc22=0;
    	listFmlkc22input.clear();
    	String kc22input="";
    	
    	strCardInfo = (String)listData.get(12);
    	//转换成FML中的input串的XML形式
//    	if(((String)listData.get(6)).equals("45")){
    	//yinsheng add 加入1821、1822的判断
    	if(((String)listData.get(6)).equals("45")||((String)listData.get(6)).equals("41")||((String)listData.get(6)).equals("1803")||((String)listData.get(6)).equals("1821")||((String)listData.get(6)).equals("1822")||((String)listData.get(6)).equals("1802")||((String)listData.get(6)).equals("1603")||((String)listData.get(6)).equals("1504")||((String)listData.get(6)).equals("1505")||((String)listData.get(6)).equals("1608")||((String)listData.get(6)).equals("1806")||((String)listData.get(6)).equals("1807")||((String)listData.get(6)).equals("1809")||((String)listData.get(6)).equals("1811")||((String)listData.get(6)).equals("1812")||((String)listData.get(6)).equals("1607")||((String)listData.get(6)).equals("1813")||((String)listData.get(6)).equals("1814")||((String)listData.get(6)).equals("1815")||((String)listData.get(6)).equals("1816")||((String)listData.get(6)).equals("1808")||((String)listData.get(6)).equals("1403")||((String)listData.get(6)).equals("1402")||((String)listData.get(6)).equals("1601")||((String)listData.get(6)).equals("1604")||((String)listData.get(6)).equals("1605")||((String)listData.get(6)).equals("1606")||((String)listData.get(6)).equals("1801")||((String)listData.get(6)).equals("1804")||((String)listData.get(6)).equals("1805")||((String)listData.get(6)).equals("49")||((String)listData.get(6)).equals("49a")||((String)listData.get(6)).equals("1602"))//全国上传下载跳过，zhyue
    	{
    		strFml=(String)listData.get(15);
    	}else{
    		//System.out.println("我想看看交易码"+((String)listData.get(5)));
    		if(((String)listData.get(5)).equals("2310")){
    			//System.out.println("这是2310哦!");
    			strinput=(String)listData.get(15);
    			
    			String []str_input=strinput.split("\\$");
    			//System.out.println("看看长度为多少："+str_input.length);
    			
    			intInputCountkc22=str_input.length;
    			//System.out.println("");
    			if(intInputCountkc22 >=2){
    				for(int i=0;i<str_input.length;i++){
    					//System.out.println("i="+i+"我的入参哦"+str_input[i]);
    					//循环多个kc22convertSI() 
    					//String strSendBussiCode,String outPutData,String strAreaCode,List callMsg
    						
    					//System.out.println("看看没个入参串："+str_input[i]);
                        kc22input=kc22convertToFml(listData,str_input[i]);
    					//System.out.println("kc22output="+kc22input);
    					strFml=strFml+kc22input+"$";
    				}
        			
        			//System.out.println("循环结束了吗?");
        			strFml="<input>"+strFml+"</input>";
    				//System.out.println("我最后的值是什么呢!strFml="+strFml);
    			}else{
    				//单条处方，xml格式
    				//System.out.println("我还是单条哦!");
    				strFml = convertToFml(listData);
    				//System.out.println("单条的入参形式是什么呢?strFml="+strFml);
    			}
    			
    			
    			}else{
    			strFml = convertToFml(listData);
    		}
    	}
    	
    	str_wtcsentout=WtcSend(strFml,strCardInfo,listData);
    
    	String []str_sentout = StrTool.split(str_wtcsentout,"@");
    	
        if (str_sentout.length >= 2) {
            str_wtcsentout = str_sentout[0];
            outPutData = str_sentout[1];
          } else {
            outPutData = "返回的错误格式不正确!" + str_wtcsentout;
            str_wtcsentout = "-1";
          }
    	List srt_output = new ArrayList();
    	srt_output.add(str_jsfjylsh); //参保地返回的接收方流水号
    	srt_output.add(str_wtcsentout); //是否成功返参
    	srt_output.add(outPutData);	  //_SRC
    	return srt_output;
    }
    /**说明
     * 主方法
     * 具体实现过程
     * */
	public String WtcSend(String inputFml,String cardInfo,List callMsg){

		//变量声明及初始化
		String strAreaCode01,strAka801,strAka802,strAka803,strTemp;
		String strAka804,strAka805;
		String str_truedes;
		List getList = new ArrayList();
		/*String strAac001;
		strAac001 = "";*/
		String appCode="0";
		String errMsg = "";
		String outPutData="";
		
		int intSeat=0;
		String outPutDatakc22="";
		
		//获取wtc参数信息ka80表，获取异地对外编号如以前程序省医保对外为220000
		//目前为229900
		//目前作为不大
		strTemp = (String) callMsg.get(0);
		
		getList = getAreaMsg(strTemp);
		//就医地统筹区号
		strAreaCode01 = (String)getList.get(0);
		getList.clear();
		//现在不需要，屏掉
		/*strTemp = (String) callMsg.get(10);
		getList = getAreaMsg(strTemp);
		if(getList.size()>0){
			strAreaCode02 = (String)getList.get(0);
		}else{
			strAreaCode02 = "";
		}
		getList.clear();*/ 
		String strAreaCode=""; 
		//目前程序，如果是省直，则直接获取
	
		strAreaCode = (String) callMsg.get(0); 
		String Str_akb020;
		String Str_center; //标识为中心端发生的业务
		Str_center="2";     //院端业务 
		String str_code=(String) callMsg.get(5); //医保传入交易码
		Str_akb020=(String)callMsg.get(1);
		//System.out.println("Str_akb020="+Str_akb020);
		//无奈之举，根据医院编号来判断是中心还是医院的交易。中心固定用0A15
		if(Str_akb020.equals("0A15")||Str_akb020.equals("22000000001")||Str_akb020.equals("22000000002")||Str_akb020.equals("22000000003"))  
		{    
			//为中心业务 
			Str_center="1";   
		}
		
		//关键信息，取出调用EJB需要设置的环境值
		getList = getKa80Msg(strAreaCode,Str_center);
		strAka801 = (String) getList.get(0);
		strAka802 = (String) getList.get(1);
		strAka803 = (String) getList.get(2);
		strAka804 = (String) getList.get(3);
		strAka805 = (String) getList.get(4);
		
		/*//获取发送方报文ID
		String strSendId;*/
		//strSendId = getReportID((String)callMsg.get(3));
		//关键信息,异地交易编码的获取
		String strSendBussiCode = getWtcBussCode((String)callMsg.get(0),(String)callMsg.get(5));
		//strAac001 = (String)callMsg.get(12);//参保地个人编号,非就医地
		try {
			//内部测试，关闭前置交易
			Properties properties = new Properties();
		    properties.put(Context.INITIAL_CONTEXT_FACTORY,strAka801); 
		    properties.put(Context.PROVIDER_URL,strAka802);	
            properties.put(Context.SECURITY_PRINCIPAL, strAka804);
            properties.put(Context.SECURITY_CREDENTIALS, strAka805);
		    Object ref = null;
		    Context context= null;
		    Rstring rb = null;
		    try{
		    	//关键项，最好写入log，EJB初始化
		    	
			    context= new InitialContext(properties);
			    ref = context.lookup(strAka803); 
		    }
		    catch(NamingException nae){
		    	
		    	errMsg = "初始化前置机连接(JNDI)出错：".concat(nae.toString());
		    	appCode = "-1";
		    	outPutData=errMsg;
		    	return appCode + "@" + errMsg;
		    }
		    
		    RstringHome rh = (RstringHome) PortableRemoteObject.narrow(ref,RstringHome.class);//得到EJBHome
		    
		    try{
		    	
		    	rb = (Rstring)rh.create();
		    	
		    }catch(RemoteException re){
		    	
		    	errMsg = "EJB会话初始化出错：" + re.toString();
		    	appCode = "-1";
		    	outPutData=errMsg;
		    	return appCode + "@" + errMsg;
		    }
		   
		    /*String strCenterCode,inputData,strMacCode;
		    strCenterCode = "";*/
		   
		    List myDate = new ArrayList();
		    //特殊处理
		    if(callMsg.get(2).equals(""))
		    {
		    	str_truedes=strAreaCode01;
		    }
		    else
		    {
			    if(strAreaCode01.equals((String)callMsg.get(2)))
				    {
				    	str_truedes=strAreaCode01;
				    }
			    else
				    {
				    	
				    	str_truedes=(String)callMsg.get(2);
				    }
		    }
			myDate.add("0000");                   //_VER           版本号 
	    	myDate.add((String)callMsg.get(1));	  //_SRC           定点编号  "中心默认0A15"
	    	myDate.add(str_truedes);	          //_DES   参保地统筹区编号
	    	myDate.add((String)callMsg.get(3));	//_OPERID       操作员编号
	    	myDate.add((String)callMsg.get(4));	//_BATNO        业务周期号  采用院端交易流水做为代替
	    	myDate.add(strSendBussiCode);	    //_MSGNO         交易代码
	    	myDate.add((String)callMsg.get(6));  //_MSGREF        "由交易发起者产生，回应报文自动带回"
	    	myDate.add((String)callMsg.get(8));  //szMSGID        发送方交易流水号
	    	myDate.add((String)callMsg.get(9));  //_SZMSGREF       返参时，返回参保地业务周期号
	    	myDate.add((String)callMsg.get(7));   //_WORKDATE      工作日期
	    	myDate.add((String)callMsg.get(10));  //_STATUS        报文状态 
	    	myDate.add((String)callMsg.get(11));  //_AKC020                    卡号（参保地）
	    	myDate.add((String)callMsg.get(12));  //_AAC001                   个人编号(参保地)
	    	myDate.add((String)callMsg.get(13));  //AAC999		"统筹区号"
	    	myDate.add((String)callMsg.get(14));  //_RESERVE       预留
	    	myDate.add(inputFml);	            //_szMSGBODY     报文体(实际入参/出参) 格式 例如<input><AKC020>09876</AKC020></input>
	    	
	    	/*//显示入参各项值
			for (int i = 0; i < myDate.size(); i++) {
				System.out.print("=="+i+"==");
				System.out.println((String)myDate.get(i));
			}*/
	    	//System.out.println("ejb");
			List rs = rb.Rstring(myDate);
			//System.out.println("ejbend");
			String strStatus,strReserve;
			
			str_jsfjylsh="0";
			
			
			//如果交易类型为挂号，过方，结算等三个交易，则需要将参保地和结算中心的接收方流水号返回来
			
			if(strSendBussiCode.equals("12")||strSendBussiCode.equals("11")||strSendBussiCode.equals("14")||strSendBussiCode.equals("21")||

strSendBussiCode.equals("22")||strSendBussiCode.equals("23")||strSendBussiCode.equals("17"))
			{
				
				str_jsfjylsh = (String)rs.get(rs.size() -3);
				
				//System.out.println(">>>>>>>>>>>>>>>>>>>>>>测试到这里没？");
				//System.out.println(">>>>>>>>>>>>>>>>>>>>>>测试到这里没2？"+str_jsfjylsh);
			}
			else
			{
				str_jsfjylsh="0";
			}
			//System.out.println(">>>>>>>>>>>>>>>>>>>>>>测试到这里没3？"+str_jsfjylsh);
			strStatus = (String)rs.get(rs.size() -2); //如果成功，EJB强行写一个值（0000），返回到此
			strReserve = (String)rs.get(rs.size()-1);//实际出参结果
			//System.out.println("callWTC;;;;;;;"+strReserve);
			
			/*strStatus="0000";
			strReserve="<output><TRANSID>530011200520120905008298</TRANSID></output>";*/
			
			/*//测试清方报错
			System.out.println("strSendBussiCode="+strSendBussiCode);
			if(strSendBussiCode.equals("24")){
				strReserve="REASON查询费用明细信息失败：ORA-01422: 实际返回的行数超出请求的行数 BSYB.PKG_K_YD_ENTRY 3963";
			}
			*/
			if(strStatus.equals("0000"))
			{
				// appCode="0";
				//outPutData =(String)rs.get(rs.size()-1);// "xml格式，例如<OUTPUT><BATNO>12345678901234</BATNO></OUTPUT>";
				outPutData=strReserve;
				//yinsheng add 加入1821、1822的判断
				if(!strSendBussiCode.equals("1802")&&!strSendBussiCode.equals("1803")&&!strSendBussiCode.equals("1603")&&!strSendBussiCode.equals("1504")&&!strSendBussiCode.equals("1505")&&!strSendBussiCode.equals("1608")&&!strSendBussiCode.equals("1806")&&!strSendBussiCode.equals("1807")&&!strSendBussiCode.equals("1809")&&!strSendBussiCode.equals("1811")&&!strSendBussiCode.equals("1812")&&!strSendBussiCode.equals("1607")&&!strSendBussiCode.equals("1813")&&!strSendBussiCode.equals("1814")&&!strSendBussiCode.equals("1815")&&!strSendBussiCode.equals("1816")&&!strSendBussiCode.equals("1821")&&!strSendBussiCode.equals("1822")&&!strSendBussiCode.equals("1808")&&!strSendBussiCode.equals("1403")&&!strSendBussiCode.equals("1402")&&!strSendBussiCode.equals("1601")&&!strSendBussiCode.equals("1604")&&!strSendBussiCode.equals("1605")&&!strSendBussiCode.equals("1606")&&!strSendBussiCode.equals("1801")&&!strSendBussiCode.equals("1804")&&!strSendBussiCode.equals("1805")&&!strSendBussiCode.equals("1602"))//全国上传下载跳过，zhyue
				{
				//判断是否有正确出参还是错误出参
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>outPutData？=========="+outPutData);
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>strSendBussiCode？=========="+strSendBussiCode);
				
				
				//已经成功，将xml格式出参转换为医保出参
				
				//暂时不生成ka85
				//setKa85Value(rs);
				//将异地出参转换为本地SI 出参 
				//不是每个交易都需要返回出参
				if(strSendBussiCode.equals("11")||strSendBussiCode.equals("31")||strSendBussiCode.equals("81")||strSendBussiCode.equals("71")||

strSendBussiCode.equals("76")||strSendBussiCode.equals("12")||strSendBussiCode.equals("14")||strSendBussiCode.equals("90")||strSendBussiCode.equals("72")||

strSendBussiCode.equals("92")||strSendBussiCode.equals("84")||strSendBussiCode.equals("94")||strSendBussiCode.equals("93")||strSendBussiCode.equals("95")||

strSendBussiCode.equals("23")||strSendBussiCode.equals("77")||strSendBussiCode.equals("78")||strSendBussiCode.equals("46")||strSendBussiCode.equals("47")

||strSendBussiCode.equals("16")||strSendBussiCode.equals("17")||strSendBussiCode.equals("41")||strSendBussiCode.equals("41a")||strSendBussiCode.equals("49")||strSendBussiCode.equals("49a")||
(strSendBussiCode.equals("102")) || (strSendBussiCode.equals("1903")) || (strSendBussiCode.equals("1904"))||strSendBussiCode.equals("99"))
				{
					
					int intSeat1 = (outPutData.toUpperCase()).indexOf("<OUTPUT>");
					
					//int intSeat2 = outPutData.indexOf("<output>");
					//System.out.println(">>>>显示出参！"+outPutData);
			    	if(intSeat1 <0 )
			    	{   
			    		int intSeat2 = (outPutData.toUpperCase()).indexOf("TPESVCFAIL");
			    		if (intSeat2 >0 )
			    		{
			    			//outPutData="因网络原因,异地传输数据发生错误！"+outPutData;
			    			//System.out.println("院端传入的发送方流水号为："+(String)callMsg.get(8));
			    			outPutData="1141院端传入的发送方流水号:" +(String)callMsg.get(8)+ "，该号码已在省异地平台已被使用。因吉林省异地平台要求发送方流水号不可重复，请医院进行核对！";
			    		}	
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("TPETIME");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="因网络原因,或参保地服务原因，造成异地传输数据发生连接超时!请联系省平台，维护电话18143087836！";
			    		}
			    		/*intSeat2 = (outPutData.toUpperCase()).indexOf("TPESVCFAIL"); 
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="因网络原因,未访问到省平台服务，请重试！或，请联系省平台维护电话18143087836！";
			    		}*/
			    		
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("TPENOENT");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="因网络原因,不能获取省平台服务！请联系省平台维护电话18143087836！";
			    		}
			    		
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("参保地未应答");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="网络中断或参保地服务无响应。请联系省平台。维护电话：18143087836！";
			    		}
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("TPESYSTEM");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="网络中断或参保地服务无响应。请联系省平台。维护电话：18143087836！";
			    		}
			    		
			    		outPutData="TUXEDOERROR："+outPutData;
			    	}
			    	else
			    	{
			    		try{
			    			

			    			//System.out.println("outPutData="+outPutData);
							if (strSendBussiCode.equals("12")) {
								outPutDatakc22 = outPutData;
								
								intSeat = outPutDatakc22.indexOf("$");
								//System.out.println("看看几个$ intSeat="+intSeat);
								String outputback="";
								if(intSeat>=0){
									//System.out.println("多条了啊!");
									outPutDatakc22=outPutDatakc22.replaceAll("<output>", "");
									outPutDatakc22=outPutDatakc22.replaceAll("</output>", "");
									String []kc22input=StrTool.split(outPutDatakc22, "$");
									String kc22output="";
									//System.out.println("出参的长度="+(kc22input.length-1));
				    				for(int i=0;i<kc22input.length-1;i++){
				    					//System.out.println("i="+i+"我的出参哦"+kc22input[i]);
				    					//循环多个kc22convertSI() 
				    					//String strSendBussiCode,String outPutData,String strAreaCode,List callMsg
				    					
				    			    		 
				    			    	kc22output= kc22convertToSi(callMsg,kc22input[i]);
				    			    	
				    					//System.out.println("循环结束了吗?"); 
				    					//System.out.println("kc22output="+kc22output);
				    					outputback=outputback+kc22output+"$";
				    					//System.out.println("=================?"+outputback);
				    					
				    				}
				    				//System.out.println("循环结束啦，出参：outputback="+outputback);
				    				outPutData=outputback;
				    				
								}else{ 
				    				
				    			    outPutData = convertToSi(str_code,outPutData,strAreaCode);
				    			}
								
							}else{
								 if("1903".equals(str_code)){
									 outPutData=outPutData.replace("<DATA><OUTPUTS>", "");
									 outPutData=outPutData.replace("</OUTPUTS></DATA>", "");
								 }
								  System.out.println("=======================================================");
				                  System.out.println("===========异地格式串转为吉林省医保格式如下==============");
				                  System.out.println(outPutData);
				                  System.out.println("===================开=====始========================");
				                  //outPutData = convertToSi(str_code, outPutData, strAreaCode);
				                  System.out.println("===================结=====束==========================");
				                  System.out.println(outPutData);
				                  System.out.println("===========异地格式串转为吉林省医保格式如上===============");
							}

			    			
			    		}catch(Exception e){
			    			
			    			errMsg = "异地数据传输出错：参保地返回值转为医保出参格式出错，请联系省平台，维护电话：18143087836!" +" 交易码为： "+strSendBussiCode+" 参保地返回值为： "+outPutData;
			    			
			    			appCode = "-1";	
			    			outPutData=errMsg;
			    		}
					
			    	}
				}
				else if(strSendBussiCode.equals("45")){ 
					//针对45交易，单独处理
					System.out.println("45交易的出参：outPutData="+outPutData);
					 
					int intSeat1 = (outPutData.toUpperCase()).indexOf("<OUTPUT>");
					
			    	if(intSeat1 <0 )
			    	{   
			    		int intSeat2 = (outPutData.toUpperCase()).indexOf("TPESVCFAIL");
			    		if (intSeat2 >0 )
			    		{
			    			System.out.println("院端传入的发送方流水号为："+(String)callMsg.get(8));
			    			outPutData="1243院端传入的发送方流水号:" +(String)callMsg.get(8)+ "，该号码已在省异地平台已被使用。因吉林省异地平台要求发送方流水号不可重复，请医院进行核对！";
			    		}	
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("TPETIME");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="因网络原因,或参保地服务原因，造成异地传输数据发生连接超时!请联系省平台，维护电话18143087836！";
			    		}
			    		
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("TPENOENT");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="因网络原因,不能获取省平台服务！请联系省平台维护电话18143087836！";
			    		}
			    		
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("参保地未应答");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="网络中断或参保地服务无响应。请联系省平台。维护电话：18143087836！";
			    		}
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("TPESYSTEM");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="网络中断或参保地服务无响应。请联系省平台。维护电话：18143087836！";
			    		}
			    		
			    		outPutData="TUXEDOERROR："+outPutData;
			    	}
			    	else
			    	{
			    		
			    		   String outPutDataback=outPutData.toUpperCase();
			    			int count_aae001=outPutDataback.indexOf("<STATUS>");
			    			int count2_aae001=outPutDataback.indexOf("</STATUS>"); 
			    			 if((count_aae001<0) || (count2_aae001<0)){
			    				 //解析45交易出错
			    					errMsg = "异地数据传输出错：参保地返回值转为医保出参格式出错，请联系省平台，维护电话：18143087836!" +" 交易码为： "+strSendBussiCode+" 参保地返回值为： "+outPutData;
					    			appCode = "-1";	
					    			outPutData=errMsg;
			    			 }else{
			    				 outPutData=outPutDataback.substring(count_aae001+8,count2_aae001);
			    			 }
			    		}
				
				}
				else
				{
					//非有出参的交易。如果有返回值，则强制处理
					
					int intSeat1 = (outPutData.toUpperCase()).length();
					
					//int intSeat2 = outPutData.indexOf("<output>");
					//System.out.println("intSeat1="+intSeat1);
			    	if(intSeat1 >8 )
			    	{
			    		int intSeat2 = (outPutData.toUpperCase()).indexOf("TPESVCFAIL");
			    		if (intSeat2 >0 )
			    		{
			    			//outPutData="因网络原因,未访问到省平台服务，请重试！";//未访问到省平台服务，请重试
			    			outPutData="1301院端传入的发送方流水号:" +(String)callMsg.get(8)+ "，该号码已在省异地平台已被使用。因吉林省异地平台要求发送方流水号不可重复，请医院进行核对！";
			    		}
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("TPETIME");//超时，请联系
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="因网络原因,或参保地服务原因，造成异地传输数据发生连接超时!请联系省平台，维护电话：18143087836！";
			    		}
			    		/*intSeat2 = (outPutData.toUpperCase()).indexOf("TPESVCFAIL");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="因网络原因,未访问到省平台服务，请重试！或，请联系省平台维护电话18143087836！";
			    		}*/
			    		
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("TPENOENT");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="因网络原因,不能获取省平台服务！请联系省平台维护电话18143087836！";
			    		}

			    		intSeat2 = (outPutData.toUpperCase()).indexOf("参保地未应答");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="网络中断或参保地服务无响应。请联系省平台。维护电话：18143087836。";
			    		}
			    		intSeat2 = (outPutData.toUpperCase()).indexOf("TPESYSTEM");
			    		if (intSeat2 >0 )
			    		{
			    			outPutData="网络中断或参保地服务无响应。请联系省平台。维护电话：18143087836！";
			    		}
			    		
			    		outPutData="TUXEDOERROR："+outPutData;
			    	}
			    	else
			    	{
					//不设出参
					outPutData="";
			    	}
				}
				}
			}
				else
				{
				
				appCode = "-1 "; 
				errMsg = strReserve;
				outPutData=errMsg;
				//errMsg = ConvertFml.ReplaceFmlAndInputData(errMsg, "<", "[");
				//errMsg = ConvertFml.ReplaceFmlAndInputData(errMsg, ">", "]");
			}
			
			
		} catch (Exception e) {
			errMsg = "异地数据传输出错 " + e.toString();
            int intSeat2 = (errMsg.toUpperCase()).indexOf("TPESVCFAIL");
    		
    		if (intSeat2 >0 )
    		{
    			if(errMsg.indexOf("网络出错")>0){
    				errMsg = e.toString();
    			}else{
    				
    				errMsg="1355院端传入的发送方流水号:" +(String)callMsg.get(8)+ "，该号码已在省异地平台已被使用。因吉林省异地平台要求发送方流水号不可重复，请医院进行核对！";
    			}
    		}
    		intSeat2 = (errMsg.toUpperCase()).indexOf("TPETIME");
    		if (intSeat2 >0 )
    		{
    			errMsg="因网络原因,或参保地服务原因，造成异地传输数据发生连接超时！请联系省平台，维护电话18143087836！";
    		}
    		/*intSeat2 = (errMsg.toUpperCase()).indexOf("TPESVCFAIL");
    		if (intSeat2 >0 )
    		{
    			errMsg="因网络原因,异地传输数据发生错误！或，请联系省平台，维护电话18143087836！";
    		}*/
    		
    		intSeat2 = (errMsg.toUpperCase()).indexOf("TPENOENT");
    		if (intSeat2 >0 )
    		{
    			errMsg="因网络原因,不能获取省平台服务！请联系省平台，维护电话18143087836！";
    		}
    		
    		intSeat2 = (errMsg.toUpperCase()).indexOf("参保地未应答");
    		if (intSeat2 >0 )
    		{
    			errMsg="网络中断或参保地服务无响应。请联系省平台，维护电话：18143087836。";
    		}
    		intSeat2 = (errMsg.toUpperCase()).indexOf("TPESYSTEM");
    		if (intSeat2 >0 )
    		{
    			errMsg="网络中断或参保地服务无响应。请联系省平台。维护电话：18143087836！";
    		}
    		
			appCode = "-1";	
			//20160727 add by li.zhiqiang 提示java错误的代码行
			errMsg = errMsg +"java :"+ e.getStackTrace()[0].getLineNumber();
			outPutData="TUXEDOERROR："+errMsg;
		}
		
		return appCode+"@"+outPutData;
	}
	
	/**说明
	 * 本方法用于将txuedo服务返回的异地出参格式转换为省直医保所需要的出参格式
	 * 
	 * 处方批量的单条
	 * */
	public String kc22convertToSi(List callMsg,String outPutData) throws AppException{
		//System.out.println("我进来了!");
    	//将转换成本地SI后的串,写到outPutData中
    	String outputStr="";
    	int intInputCount=0;
    	List listFml = new ArrayList();
    	listFml.clear();
      	int intSeat = 1;
    	
    	
 	
		//转换成本地SI出参
		//System.out.println("我要去重组啦啦！！！outPutData="+outPutData);
		//outputStr = executeProcedure(strSendBussiCode,outPutData,strAreaCode);
		outPutData=outPutData.replaceAll("<output>", "");
		outPutData=outPutData.replaceAll("</output>", "");
		//System.out.println("准备好的出参：outPutData="+outPutData);
		
		outputStr=outPutData;
		
		
		listFml.add(0, "占位");
    	while(true){
    		intSeat = outputStr.indexOf("|");
    		if(intSeat >=0 ){
    			intInputCount += 1;
    			listFml.add(intInputCount, outputStr.substring(0,intSeat));
    			
    			outputStr = outputStr.substring(intSeat + 1);
    		}else{
    			//如果查不到"|"，则将整个strInputData做为一个参数进行传入
    			intInputCount += 1;
    			listFml.add(intInputCount, outputStr);
    			
    			break;
    		}    		
    	}

		//System.out.println("到这里吗");
    	StringBuffer sql = new StringBuffer();
    	String strAka823="",strAka825="",strAka804="",strAka805="",strAka820="",strAka821="",strConvert="",strValue;    	
    	String bussNo = (String)callMsg.get(5); //交易码
 
    	String strAab324 = (String)callMsg.get(0);  //229900  	
    	sql.append("select nvl(aka823,'0') aka823,nvl(aka825,'NO') aka825,nvl(aka824,'0') aka824,nvl(aka804,'0') aka804,nvl(aka805,'0') aka805,aka820,aka821 from ka83 where  aka803 = '2' and" +
    			                                               " aab324 = ?   and" + 
    			                                               " aka802 = ? " +
    			                                               "order by to_number(aka824)");
    	Object[] params={strAab324,bussNo};
    	int i = 1;
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString(), params);
			intSeat = 1;
			for (i = 1; i <= dsTemp.getRowCount(); i++) {
				 dsTemp.moveTo(i);
				 strAka823 = dsTemp.getString("aka823");
				 strAka825 = dsTemp.getString("aka825");
				 //strAka824 = dsTemp.getString("aka824");
				 strAka804 = dsTemp.getString("aka804");
				 strAka805 = dsTemp.getString("aka805");
				 strAka820 = dsTemp.getString("aka820");
				 strAka821 = dsTemp.getString("aka821");
				 intSeat = Integer.parseInt(strAka823);
				 strValue = "";
				 
				// 需要增加校验
				 if(strAka820.equals("NVL")){
					 
					 if (strAka825.equals("YES")){
						 strValue=strAka804;
					 }else{
		                  strValue="";
		            }
				 }else{
						strValue = (String)listFml.get(intSeat); 
						//System.out.println("list的strValue="+strValue);
				 }
				 
				 //二级代码转换
				 if(strAka805.equals("NULL"))
				   {
					   //strValue="";
					   strAka805="0";
				   }
				   
				  // System.out.println("测试二级代码0："+strAka805);
				 //判断strAka820为二级代码
				   if(strAka805.equals("1")){
					   strValue=ConvertinCode(strAka820,strValue,strAka821);
				   }
				 
				 strConvert=strConvert.concat(strValue).concat("|");				 
			}
		} catch (AppException e) {
			// TODO Auto-generated catch block			
			e.printStackTrace();
			//System.out.println("callWtc 转换为本地参数时出错.出错位： "+ Integer.valueOf(i));
			e.setErrMsg("callWtc 转换为本地参数时出错.出错位： "+ Integer.valueOf(i));
		}    
		
		//生成出参
    	outPutData = strConvert;
    	//System.out.println("生成的出参outPutData="+outPutData);
    	return outPutData;
    }
	/*public String getWtcBusiCode(){
		return strSendBussiCode;
	}*/
	/*public String getAppCode(){
		return appCode;
	}*/
	/*public String getOutputData(){
		return outPutData;
	}	*/
/*	public String getErrorMsg(){
		return errMsg;
	}*/
	//业务周期号是否有用，需要测试时再看
    public String getCenterCode(String strAkb020,String strMacCode,String strOpId){
    	String strAka347;
    	strAka347 = "";
    	StringBuffer sql = new StringBuffer();
    	
    	sql.append("SELECT distinct(BKC376) strBKC376 FROM kf44  WHERE akb020 = ? AND BKC441 = ? AND akc345 = ?  AND akc350 IS NULL ");
    	Object[] params={strAkb020,strMacCode,strOpId};
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString(), params);
			if(dsTemp.getRowCount() > 0){
			   dsTemp.moveTo(1);
			   strAka347 = dsTemp.getString("strBKC376");
			}
		} catch (AppException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	return strAka347;
    } 	
    //存日志方法改为在前台存储。每回的入参及出参
   /* public void setKa85Value(List myDate) throws AppException,ParseException{
    	String strSql;
    	StringBuffer sql = new StringBuffer();
    	StringBuffer sqlNull = new StringBuffer();
    	String strAka800;
    	strSql = "select to_char(sysdate,'yyyymmddhh24miss')||trim(to_char(seq_k_ka85id.nextval,'000000')) strId from dual";
    	sql.append(strSql);
    	strAka800 = ""; 
    	try {
			ValueDataSet dsTemp = SqlUtil.getInstance().executeQuery(sql.toString());
			if(dsTemp.getRowCount() > 0){
			   dsTemp.moveTo(1);
			   strAka800 = dsTemp.getString("strId");
			}
		} catch (AppException e) {
			// TODO Auto-generated catch block 
			e.printStackTrace();
		}
		strSql = "insert into ka85 (AKA800,AKC801,AKC803,AKA806,AKA807,AKB020,AKA802,AKC347,AAE036,";
		strSql = strSql.concat("AKC276,AAE013,AKA808,akc378) values ( ?,?,?,?,?,?,?,?,?,?,?,?,?) ");		
		Object[] params={ strAka800,(String)myDate.get(2),(String)myDate.get(4),
					     (String)myDate.get(9),(String)myDate.get(12),(String)myDate.get(0),
					     (String)myDate.get(10),(String)myDate.get(5),(String)myDate.get(21),
					     (String)myDate.get(17),(String)myDate.get(7),"2",strAkc378
					     };
		int ret;
		System.out.println(strSql);
		ret = SqlUtil.getInstance().executeUpdate(strSql, params);
		System.out.println("KA85处理结果：".concat(Integer.toString(ret)));
    }*/
    /**
	 * <p>Description:[方法功能中文描述]</p>
	 * @param listFml
	 * @return
	 * @author:黄禹
     * @param datekc21 
     * @throws AppException 
	 * @update:[日期YYYY-MM-DD] [更改人姓名][变更描述]
	 */
	
	public String[] queryka52(List listFml, ValueDataSet datekc21) throws AppException {
		String aka065="";
		String aka068="";
		String akc229="";
		String sqlkc22="";
		String aka101=datekc21.getString("AKA101");
		String	akc021=datekc21.getString("AKC021");
		String	aka130=datekc21.getString("AKA130");
		String 	bae450=datekc21.getString("BAE450");
	  	String querydate=listFml.get(5).toString().substring(0, 8);
	  	Object[] params1 = {listFml.get(7),querydate,querydate};
	  	boolean falg=false;
	  	
	  		//药品
		  	if(listFml.get(2).equals("1")){
		  		System.out.println("-------------------你是药品-----------");
		  		sqlkc22 = "select AKA065,AKA068 from ka02 where aka060 = ? and to_char(aae030,'yyyymmdd')<=? and (aae031 is null or to_char(aae031,'yyyymmdd') >= ?) and ka02.aae100 ='1'";
		  		
		  	}
		  	//诊疗&&服务设施
			if(listFml.get(2).equals("2")||listFml.get(2).equals("3")){
				System.out.println("-------------------你是诊疗&&服务设施-----------");
				sqlkc22 = "select AKA065,AKA068 from ka03 where ka03.aka090 = ? and to_char(aae030,'yyyymmdd') <=? and (aae031 is null or to_char(aae031,'yyyymmdd')>= ? ) and ka03.aae100 ='1'";
				
			}
			if(!"".equals(sqlkc22)){
				ValueDataSet datekc22 = SqlUtil.getInstance().executeQuery(sqlkc22, params1);
		  		if(datekc22.getRowCount()>0){
		  			System.out.println("-------------------你是三大目录内的哦-----------");
		  			datekc22.moveTo(1);
		  			 aka065=datekc22.getString(1);
		  			 if(!"".equals(datekc22.getString(2))&&!"null".equals(datekc22.getString(2))&&datekc22.getString(2)!=null){
		  				aka068=datekc22.getString(2);
		  			 }else{
		  				aka068="";
		  			 }
		  		  	 
		  		  	falg = true;
		  		}else{
		  			 aka065="3";
		  		  	 aka068="";
		  		  	 akc229="";
		  		}
		  		if(falg){
		  			
		  			String sqlka52 = "select * from ka52 where ake001 = ? AND (instr(aka101,?)>0 OR instr(aka101,'99')>0) AND (instr(bkc021,?)>0 OR instr(bkc021,'99')>0) " +
							"AND (instr(aka130,?)>0 OR instr(aka130,'99')>0) and ake003 = ? AND to_char(aae030,'yyyymmdd') <=? " +
							"and (aae031 is null or to_char(aae031,'yyyymmdd')>= ? ) and aae100='1'";
						
					Object[] params2 = {listFml.get(7),aka101,akc021,aka130,listFml.get(2),querydate,querydate};
					ValueDataSet dateka52 = SqlUtil.getInstance().executeQuery(sqlka52, params2);
					System.out.println("-------------------查询ka52内容-----------");
					if(dateka52.getRowCount()>0){
						System.out.println("-------------------有ka52内容-----------");
						dateka52.moveTo(1);
						
						aka065=datekc22.getString("AKA065");
			  		  if(dateka52.getDouble("AKA068") > 0){
			  			  aka068 = dateka52.getString("AKA068");
					  }
				  	  if("2".equals(aka065)){
						  akc229=dateka52.getString("AKA069");
					  }
			  		}else{
			  			System.out.println("-------------------没有ka52内容那就查ke34吧-----------");
			  			if("2".equals(aka065)){
			  				String sqlke34 = "select * from ke34 where (instr(aka063,?)>0 OR instr(aka063,'99')>0) AND (instr(bkc021,?)>0 OR instr(bkc021,'99')>0) AND " +
								"(instr(aka130,?)>0 OR instr(aka130,'99')>0) AND AKA049<=? AND (AKA048 is null OR AKA048>=?) " +
								"AND AAE054<=? AND (AAE055 is null OR AAE055>=?) AND bka200=?";
			  				Object[] params3 = {(String)listFml.get(3),akc021,aka130,new Double((String)listFml.get(9)),new Double((String)listFml.get(9)),
			  						new Integer(bae450),new Integer(bae450),"1"};
			  				ValueDataSet dateke34 = SqlUtil.getInstance().executeQuery(sqlke34, params3);
			  				if(dateke34.getRowCount()>0){
			  					dateke34.moveTo(1);
			  					akc229=dateke34.getString("BKA162");
			  				}else{
			  					System.out.println("-------------------没有ke34吧-----------");
			  					throw new AppException("没有查询到乙类自付比例，请核对信息!");
			  					
			  				}
			  			}
			  		}
					
					
		  		}
			}
			String a[]={aka065,aka068,akc229};
			System.out.println("-------------输出：aka065-----------"+a[0]);
			System.out.println("-------------输出：aka068-----------"+a[1]);
			System.out.println("-------------输出：akc229-----------"+a[2]);
				
		return a;
	}
}